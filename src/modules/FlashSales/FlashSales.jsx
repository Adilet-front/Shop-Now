// src/modules/ExploreProducts/ExploreProducts.jsx (—Ä–∞–Ω–µ–µ FlashSales.jsx)

import { useEffect, useState, useRef } from "react";
import styles from "./FlashSales.module.scss";
import {
  FaArrowLeft,
  FaArrowRight,
  FaRegHeart,
  FaRegEye,
  FaStar,
  FaRegStar,
} from "react-icons/fa";

import { useDispatch } from "react-redux";
import { addFavorites } from "../../store/features/favoritesSlice";

import FlashSalesTimer from "./components/FlashSalesTimer";

// Import the addToCartAPI function
import { addToCartAPI } from "../../constants/fetchProducts"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É api.js –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞, –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
const StarRating = ({ rating, reviews }) => {
  const filledStarUrl = "https://www.svgrepo.com/show/13695/star.svg";
  if (!Array.isArray(rating)) return null;
  return (
    <div className={styles.starRating}>
      <div className={styles.starsContainer}>
        {rating.map((starUrl, index) =>
          starUrl === filledStarUrl ? (
            <FaStar key={index} />
          ) : (
            <FaRegStar key={index} />
          )
        )}
      </div>
      <span className={styles.reviews}>({reviews || 0})</span>
    </div>
  );
};

const FlashSales = () => {
  const [products, setProducts] = useState([]);
  const [page, setPage] = useState(0);
  const [showAll, setShowAll] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ View All
  const itemsPerPage = 4;
  const sectionRef = useRef(null); // –î–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  const dispatch = useDispatch();

  useEffect(() => {
    fetch("http://localhost:3001/products")
      .then((res) => res.json())
      .then((data) => setProducts(data))
      .catch((error) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error));
  }, []);

  const ourProducts = products.filter(
    (product) => product.categoryAll === "Today's"
  );

  const maxPage = Math.ceil(ourProducts.length / itemsPerPage) - 1;
  const handleNext = () => {
    if (page < maxPage) setPage(page + 1);
  };
  const handlePrev = () => {
    if (page > 0) setPage(page - 1);
  };

  const handleShowLess = () => {
    setShowAll(false);
    setPage(0); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    sectionRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É ---
  const handleAddToCart = async (product) => {
    try {
      await addToCartAPI(product);
      alert(`${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ UI,
      // –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Redux –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã
      // –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–∞–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã.
      // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Redux),
      // –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —ç–∫—à–Ω —Ç–∏–ø–∞ `dispatch(cartActions.addItem(product))`
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.");
    }
  };

  // --- –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ---
  // –ï—Å–ª–∏ `showAll` true, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ. –ò–Ω–∞—á–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É.
  const visibleProducts = showAll
    ? ourProducts
    : ourProducts.slice(page * itemsPerPage, (page + 1) * itemsPerPage);

  if (ourProducts.length === 0) return null;

  return (
    <div className={styles.exploreProducts} ref={sectionRef}>
      <div className={styles.headerRow}>
        <div className={styles.categoryLabel}>
          <span className={styles.redDot}></span>
          <span>Today‚Äôs</span>
        </div>
      </div>
      <div className={styles.titleRow}>
        <h2 className={styles.title1}>
          Flash Sales
          <FlashSalesTimer />
        </h2>

        {/* üëá –°–¢–†–ï–õ–ö–ò –ü–û–ö–ê–ó–´–í–ê–Æ–¢–°–Ø, –¢–û–õ–¨–ö–û –ö–û–ì–î–ê `showAll` –í–´–ö–õ–Æ–ß–ï–ù üëá */}
        {!showAll && (
          <div className={styles.navigationArrows}>
            <button
              className={styles.arrow}
              onClick={handlePrev}
              disabled={page === 0}
            >
              <FaArrowLeft />
            </button>
            <button
              className={styles.arrow}
              onClick={handleNext}
              disabled={page >= maxPage}
            >
              <FaArrowRight />
            </button>
          </div>
        )}
      </div>

      <div className={styles.productGrid}>
        {visibleProducts.map((product) => (
          <div key={product.id} className={styles.productCard}>
            <div className={styles.imageContainer}>
              {product.discount && (
                <span className={`${styles.tag} ${styles.tagDiscount}`}>
                  -{product.discount}%
                </span>
              )}
              {product.isNew && (
                <span className={`${styles.tag} ${styles.tagNew}`}>NEW</span>
              )}
              <div className={styles.icons}>
                <button
                  onClick={() => dispatch(addFavorites(product))}
                  className={styles.iconBtn}
                >
                  <FaRegHeart />
                </button>
                <a href="/src/modules/Detailwatch">
                  <button className={styles.iconBtn}>
                    <FaRegEye />
                  </button>
                </a>
              </div>
              <img
                src={product.imageUrl}
                alt={product.name}
                className={styles.productImage}
              />
              {/* –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onClick –∫ –∫–Ω–æ–ø–∫–µ Add To Cart */}
              <button
                className={styles.addToCart}
                onClick={() => handleAddToCart(product)}
              >
                Add To Cart
              </button>
            </div>
            <div className={styles.productInfo}>
              <p className={styles.productName}>{product.name}</p>
              <div className={styles.priceRow}>
                <span className={styles.price}>${product.price}</span>
                {product.oldPrice && (
                  <span className={styles.oldPrice}>${product.oldPrice}</span>
                )}
              </div>
              <StarRating rating={product.rating} reviews={product.Reviews} />
            </div>
          </div>
        ))}
      </div>
      {/* üëá –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–ù–û–ü–ö–ò "VIEW ALL" / "SHOW LESS" üëá */}
      {ourProducts.length > itemsPerPage && (
        <div className={styles.viewAllContainer}>
          {showAll ? (
            <button className={styles.viewAllButton} onClick={handleShowLess}>
              Show Less
            </button>
          ) : (
            <button
              className={styles.viewAllButton}
              onClick={() => setShowAll(true)}
            >
              View All Products
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default FlashSales;